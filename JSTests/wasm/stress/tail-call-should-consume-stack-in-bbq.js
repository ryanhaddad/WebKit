/*
(module
    (tag $nonzero (param))
    (tag $zero (param))

    (type $i32-i32 (func (param i32) (result i32)))
    (table $countdown-table funcref (elem $countdown-indirect))

    (func $countdown (param i32) (result i32) (local f32)
        f32.const 42
        local.set 1

        try
            local.get 0
            i32.const 0
            i32.eq
            if
                throw $zero
            else
                throw $nonzero
            end
        catch $nonzero
            local.get 0
            local.get 0
            i32.add

            local.get 0
            i32.const 1
            i32.sub
            return_call $countdown
        catch_all
        end

        f32.const 0
        local.get 1
        f32.add
        i32.trunc_f32_u
    )

    (func $countdown-indirect (param i32) (result i32) (local f32)
        f32.const 42
        local.set 1

        try
            local.get 0
            i32.const 0
            i32.eq
            if
                throw $zero
            else
                throw $nonzero
            end
        catch $nonzero
            local.get 0
            local.get 0
            i32.add

            local.get 0
            i32.const 1
            i32.sub
            i32.const 0
            return_call_indirect $countdown-table (type $i32-i32)
        catch_all
        end

        f32.const 0
        local.get 1
        f32.add
        i32.trunc_f32_u
    )

    (func $countdown-ref (param i32) (result i32) (local f32)
        f32.const 42
        local.set 1

        try
            local.get 0
            i32.const 0
            i32.eq
            if
                throw $zero
            else
                throw $nonzero
            end
        catch $nonzero
            local.get 0
            local.get 0
            i32.add

            local.get 0
            i32.const 1
            i32.sub
            ref.func $countdown-ref
            return_call_ref $i32-i32
        catch_all
        end

        f32.const 0
        local.get 1
        f32.add
        i32.trunc_f32_u
    )

    (func (export "main")
        block
            block
                i32.const 100000
                call $countdown
                i32.const 42
                i32.eq
                br_if 0
                unreachable
            end
            i32.const 100000
            call $countdown-indirect
            i32.const 42
            i32.eq
            br_if 0
            unreachable
        end
        i32.const 100000
        call $countdown-ref
        i32.const 42
        i32.eq
        br_if 0
        unreachable
    )
)
*/

var code = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x09, 0x02, 0x60, 0x01, 0x7f, 0x01, 0x7f, 0x60, 0x00, 0x00,
    0x03, 0x05, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04, 0x05, 0x01, 0x70, 0x01, 0x01, 0x01, 0x0d, 0x05, 0x02, 0x00, 0x01,
    0x00, 0x01, 0x07, 0x08, 0x01, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x03, 0x09, 0x0b, 0x02, 0x00, 0x41, 0x00, 0x0b,
    0x01, 0x01, 0x03, 0x00, 0x01, 0x02, 0x0a, 0xdb, 0x01, 0x04, 0x36, 0x01, 0x01, 0x7d, 0x43, 0x00, 0x00, 0x28, 0x42,
    0x21, 0x01, 0x06, 0x40, 0x20, 0x00, 0x41, 0x00, 0x46, 0x04, 0x40, 0x08, 0x01, 0x05, 0x08, 0x00, 0x0b, 0x00, 0x07,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x6a, 0x1a, 0x20, 0x00, 0x41, 0x01, 0x6b, 0x12, 0x00, 0x19, 0x01, 0x0b, 0x43, 0x00,
    0x00, 0x00, 0x00, 0x20, 0x01, 0x92, 0xa9, 0x0b, 0x39, 0x01, 0x01, 0x7d, 0x43, 0x00, 0x00, 0x28, 0x42, 0x21, 0x01,
    0x06, 0x40, 0x20, 0x00, 0x41, 0x00, 0x46, 0x04, 0x40, 0x08, 0x01, 0x05, 0x08, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x6a, 0x1a, 0x20, 0x00, 0x41, 0x01, 0x6b, 0x41, 0x00, 0x13, 0x00, 0x00, 0x19, 0x01, 0x0b, 0x43,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x92, 0xa9, 0x0b, 0x38, 0x01, 0x01, 0x7d, 0x43, 0x00, 0x00, 0x28, 0x42, 0x21,
    0x01, 0x06, 0x40, 0x20, 0x00, 0x41, 0x00, 0x46, 0x04, 0x40, 0x08, 0x01, 0x05, 0x08, 0x00, 0x0b, 0x00, 0x07, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x6a, 0x1a, 0x20, 0x00, 0x41, 0x01, 0x6b, 0xd2, 0x02, 0x15, 0x00, 0x19, 0x01, 0x0b, 0x43,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x92, 0xa9, 0x0b, 0x2f, 0x00, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x41, 0xa0,
    0x8d, 0x06, 0x10, 0x00, 0x41, 0x2a, 0x46, 0x0d, 0x00, 0x00, 0x0b, 0x41, 0xa0, 0x8d, 0x06, 0x10, 0x01, 0x41, 0x2a,
    0x46, 0x0d, 0x00, 0x00, 0x0b, 0x41, 0xa0, 0x8d, 0x06, 0x10, 0x02, 0x41, 0x2a, 0x46, 0x0d, 0x00, 0x00, 0x0b, 0x0b
]);

var module = new WebAssembly.Module(code);
var instance = new WebAssembly.Instance(module);
instance.exports.main()

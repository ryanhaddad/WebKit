import * as assert from "../assert.js"

// Modified from https://github.com/WebAssembly/exception-handling/blob/main/test/js-api/exception/jsTag.tentative.any.js

function throw_ref(x) {
    throw x;
}
/*
  const builder = new WasmModuleBuilder();
  const jsTag = builder.addImportedTag("module", "JSTag", kSig_v_r);

  const throwRefFn = builder.addImport("module", "throw_ref", kSig_r_r);
  const sig_r_v = builder.addType(kSig_r_v);
  const kSig_re_v = makeSig([], [kExternRefCode, kExnRefCode]);
  const sig_re_v = builder.addType(kSig_re_v);

  // Calls throw_ref, catches an exception with 'try_table - catch JSTag', and
  // returns it
  builder.addFunction("catch_js_tag_and_return", kSig_r_r)
    .addBody([
      kExprBlock, sig_r_v,
        kExprTryTable, sig_r_v, 1,
          kCatchNoRef, jsTag, 0,
          kExprLocalGet, 0,
          kExprCallFunction, throwRefFn,
        kExprEnd,
      kExprEnd,
    ])
    .exportFunc();

  // Calls throw_ref, catches an exception with 'try_table - catch_ref JSTag',
  // and returns it
  builder.addFunction("catch_ref_js_tag_and_return", kSig_r_r)
    .addBody([
      kExprBlock, sig_re_v,
        kExprTryTable, sig_r_v, 1,
          kCatchRef, jsTag, 0,
          kExprLocalGet, 0,
          kExprCallFunction, throwRefFn,
        kExprEnd,
        kExprReturn,
      kExprEnd,
      kExprDrop,
    ])
    .exportFunc();

  // Calls throw_ref, catches an exception with 'try_table - catch_ref JSTag',
  // and rethrows it (with throw_ref)
  builder.addFunction("catch_ref_js_tag_and_throw_ref", kSig_r_r)
    .addBody([
      kExprBlock, sig_re_v,
        kExprTryTable, sig_r_v, 1,
          kCatchRef, jsTag, 0,
          kExprLocalGet, 0,
          kExprCallFunction, throwRefFn,
        kExprEnd,
        kExprReturn,
      kExprEnd,
      kExprThrowRef,
    ])
    .exportFunc();
*/
let code = new Uint8Array([
    0x00,0x61,0x73,0x6d,0x01,0x00,0x00,0x00,0x01,0x8f,0x80,0x80,0x80,0x00,0x03,0x60,0x01,0x6f,0x00,0x60,0x01,0x6f,0x01,0x6f,0x60,0x00,0x02,0x6f,0x69,0x02,0x98,0x80,0x80,0x80,0x00,0x02,0x01,0x69,0x03,0x74,0x61,0x67,0x04,0x00,0x00,0x01,0x69,0x09,0x74,0x68,0x72,0x6f,0x77,0x5f,0x72,0x65,0x66,0x00,0x01,0x03,0x84,0x80,0x80,0x80,0x00,0x03,0x01,0x01,0x01,0x07,0xda,0x80,0x80,0x80,0x00,0x03,0x17,0x63,0x61,0x74,0x63,0x68,0x5f,0x6a,0x73,0x5f,0x74,0x61,0x67,0x5f,0x61,0x6e,0x64,0x5f,0x72,0x65,0x74,0x75,0x72,0x6e,0x00,0x01,0x1b,0x63,0x61,0x74,0x63,0x68,0x5f,0x72,0x65,0x66,0x5f,0x6a,0x73,0x5f,0x74,0x61,0x67,0x5f,0x61,0x6e,0x64,0x5f,0x72,0x65,0x74,0x75,0x72,0x6e,0x00,0x02,0x1e,0x63,0x61,0x74,0x63,0x68,0x5f,0x72,0x65,0x66,0x5f,0x6a,0x73,0x5f,0x74,0x61,0x67,0x5f,0x61,0x6e,0x64,0x5f,0x74,0x68,0x72,0x6f,0x77,0x5f,0x72,0x65,0x66,0x00,0x03,0x0a,0xc4,0x80,0x80,0x80,0x00,0x03,0x90,0x80,0x80,0x80,0x00,0x00,0x02,0x6f,0x1f,0x6f,0x01,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x0b,0x0b,0x0b,0x92,0x80,0x80,0x80,0x00,0x00,0x02,0x02,0x1f,0x6f,0x01,0x01,0x00,0x00,0x20,0x00,0x10,0x00,0x0b,0x0f,0x0b,0x1a,0x0b,0x92,0x80,0x80,0x80,0x00,0x00,0x02,0x02,0x1f,0x6f,0x01,0x01,0x00,0x00,0x20,0x00,0x10,0x00,0x0b,0x0f,0x0b,0x0a,0x0b
]);
let module = new WebAssembly.Module(code);
let instance = new WebAssembly.Instance(module, {
    "i": { throw_ref, tag: WebAssembly.JSTag }
});

const obj = {};
const wasmTag = new WebAssembly.Tag({parameters:['externref']});
const exn = new WebAssembly.Exception(wasmTag, [obj]);

// Test catch w/ return:
// This throws obj as a JS exception so it should be caught by the program and
// be returned as the original obj.
assert.eq(obj, instance.exports.catch_js_tag_and_return(obj));
// This is a WebAssembly.Exception, so the exception should just pass through
// the program without being caught.
assert.throwsExactly(() => instance.exports.catch_js_tag_and_return(exn), exn);

// Test catch_ref w/ return:
// This throws obj as a JS exception so it should be caught by the program and
// be returned as the original obj.
assert.eq(obj, instance.exports.catch_ref_js_tag_and_return(obj));

// This is a WebAssembly.Exception, so the exception should just pass through
// the program without being caught.
assert.throwsExactly(() => instance.exports.catch_ref_js_tag_and_return(exn), exn);

// Test catch_ref w/ throw_ref:
// This throws obj as a JS exception so it should be caught by the program and
// be rethrown.
assert.throwsExactly(() => instance.exports.catch_ref_js_tag_and_throw_ref(obj), obj);
// This is a WebAssembly.Exception, so the exception should just pass through
// the program without being caught.
assert.throwsExactly(() => instance.exports.catch_ref_js_tag_and_throw_ref(exn), exn);
